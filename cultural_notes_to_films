import os
import openai
from docx import Document
from tqdm import tqdm  # For progress bar

# Load your OpenAI API key from an environment variable
openai.api_key = os.getenv("OPENAI_API_KEY")

def process_document_in_batches(input_file_path, output_file_path, batch_size=10):
    """
    Processes a Word document containing a table with English-Russian translations,
    extracting cultural notes using the OpenAI API and saving the output to a new document.

    Args:
        input_file_path (str): Path to the input Word (.docx) file.
        output_file_path (str): Path to save the processed Word file with cultural notes.
        batch_size (int): Number of rows to process per batch.
    """
    try:
        # Load the Word document
        doc = Document(input_file_path)
    except ImportError:
        print("The 'python-docx' package is not installed. Install it using: pip install python-docx")
        return

    # Extract table data
    table_data = []
    for table in doc.tables:
        for row in table.rows[1:]:
            source_text = row.cells[1].text.strip()
            translated_text = row.cells[2].text.strip()
            table_data.append({
                "Source (EN)": source_text,
                "Target (RU)": translated_text,
                "Cultural Notes": ""  # Placeholder for cultural notes
            })

    # Process the data in batches with a progress bar
    processed_items = 0
    total_batches = (len(table_data) + batch_size - 1) // batch_size

    with tqdm(total=len(table_data), desc="Processing Rows") as pbar:
        for batch_start in range(0, len(table_data), batch_size):
            batch_end = min(batch_start + batch_size, len(table_data))
            for i, data in enumerate(table_data[batch_start:batch_end]):
                source_text = data["Source (EN)"]

                # Create a prompt to extract cultural references
                prompt = (
                    "Extract cultural references (idioms, names of places, events, medicines, teams, puns, and jokes) "
                    "from the following text that might be unfamiliar to foreigners. "
                    "Focus on identifying and explaining less obvious or culturally specific references that could be "
                    "difficult to understand without local knowledge.\n\n"
                    "For each, provide a concise but thorough explanation in Russian, starting directly with the "
                    "explanation without repeating the source text. Avoid verbosity and do not explain common or "
                    "widely understood expressions or basic phrases. If no explanations are needed, return '-'.\n\n"
                    f"Text: '{source_text}'"
                )

                # Request explanation from OpenAI
                try:
                    response = openai.chat.completions.create(
                        model="gpt-4o-mini",  # Using a faster model
                        messages=[{"role": "user", "content": prompt}],
                        max_tokens=100,
                        temperature=0.5
                    )
                    cultural_note = response.choices[0].message.content.strip()
                except Exception as e:
                    cultural_note = f"Error: {str(e)}"

                # Update the data with the cultural note
                table_data[batch_start + i]["Cultural Notes"] = cultural_note

                processed_items += 1
                pbar.update(1)

    # Create a new document to save the updated table
    new_doc = Document()
    table = new_doc.add_table(rows=1, cols=4)
    hdr_cells = table.rows[0].cells
    hdr_cells[0].text = "#"
    hdr_cells[1].text = "Source (EN)"
    hdr_cells[2].text = "Target (RU)"
    hdr_cells[3].text = "Cultural Notes"

    # Populate the table with the processed data
    for idx, data in enumerate(table_data, start=1):
        row_cells = table.add_row().cells
        row_cells[0].text = str(idx)
        row_cells[1].text = data.get("Source (EN)", "")
        row_cells[2].text = data.get("Target (RU)", "")
        note = data.get("Cultural Notes", "-")
        row_cells[3].text = note if note != "-" else "-"

    # Save the new document
    new_doc.save(output_file_path)
    print("Cultural notes have been successfully added.")

if __name__ == "__main__":
    # Specify file paths
    input_file_path = r"C:\path\to\your\input.docx"
    output_file_path = r"C:\path\to\your\output.docx"

    # Ensure the API key is set
    if not openai.api_key:
        raise ValueError("Please set the OPENAI_API_KEY environment variable.")

    # Process the document
    process_document_in_batches(input_file_path, output_file_path, batch_size=10)
    print(f"Processed document saved to: {output_file_path}")
